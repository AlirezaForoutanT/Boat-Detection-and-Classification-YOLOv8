import pandas as pd

# # Load the CSV file into a DataFrame
BoatsDataset = pd.read_csv("Boats_With_Area_mm2.csv")
Boats = pd.read_csv("boats.csv")
# print(BoatsDataset)
# print(Boats)


def preprocessing():
    # Drop unnecessary columns to streamline the data
    Boats = Boats.drop(["created_year", "created_month", "created_date", "zip", "state", "city",
                        "sellerId", "price", "minEngineYear", "maxEngineYear", "totalHP", 
                        "fuelType", "condition", "year"], axis=1)

    Boats = Boats.drop_duplicates(subset=['model'], keep='first')

    # Convert 'length_ft' and 'beam_ft' from feet to meters, handling non-convertible values by setting them to 0
    Boats['length_m'] = pd.to_numeric(Boats['length_ft'], errors='coerce').fillna(0) * 0.3048
    Boats['beam_m'] = pd.to_numeric(Boats['beam_ft'], errors='coerce').fillna(0) * 0.3048

    # Calculate the Area in square meters and then convert to square millimeters
    Boats['Area_m2'] = Boats['length_m'] * Boats['beam_m']  # Conversion included in the calculation

    # Save the modified DataFrame back to a CSV file
    Boats.to_csv('Boats_With_Area_mm2.csv', index=False)  # Saving with a new name to reflect the unit changes


# print(Boats)
def recommend_models_based_on_area(BoatsDataset, Boats):
    recommendations = {}  # Dictionary to store recommendations for each boat
    
    # Reset indices of both datasets to ensure alignment
    BoatsDataset = BoatsDataset.reset_index(drop=True)
    Boats = Boats.reset_index(drop=True)
    
    for index, row in Boats.iterrows():
        # Calculate Â±10% range of the boat's area
        area_min = int(row['Area_m2'] * 0.95)
        area_max = int(row['Area_m2'] * 1.05)

        # Filter DataFrame for models within the target area range, excluding the current boat
        possible_models = BoatsDataset[(BoatsDataset['Area_m2'] >= area_min) & (BoatsDataset['Area_m2'] <= area_max)]
        
        # Store the model recommendations for the current boat
        recommendations[row['Model']] = possible_models['model'].tolist()
        print(recommendations)
        print(recommendations)
    
    return recommendations

# Example usage
recommendations = recommend_models_based_on_area(BoatsDataset,Boats)

# # Print recommendations for each boat model
# for model, recommended_models in recommendations.items():
#     print(f"Boat Model: {model}")
#     print(f"Recommended Models: {recommended_models}")
#     print()  # Print a newline for better readability